
//无重叠区间
public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals.length==0||intervals.length==1)    return 0;
        //按end排序
        Arrays.sort(intervals,(a,b)->a[1]-b[1]);
        int count = 1;
        int x_end = intervals[0][1];
        for (int[] i: intervals) {
            int start = i[0];
            if (start>=x_end){
                x_end = i[1];
                count++;
            }
        }
        return intervals.length-count;
    }
    
    //合并区间
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        if (intervals==null||intervals.length==0){
            return res.toArray(intervals);
        }
        Arrays.sort(intervals,(a,b)-> a[0] - b[0]);
        int i=0;
        while (i<intervals.length){
            int left = intervals[i][0];
            int right = intervals[i][1];
            //合并，第一个区间的后一位和第二个区间的前一位比较并合并
            while (i<intervals.length-1&&intervals[i+1][0]<=right){
                right = Math.max(right,intervals[++i][1]);
            }
            res.add(new int[]{left,right});
            i++;
        }
        return res.toArray(new int[0][]);
    }
