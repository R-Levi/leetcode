//深度优先 回溯算法
//                    【】

      【1】           【2】             【3】
      
【1，2】【1，3】  【2，1】【2，3】  【3，1】【3，2】

【123】  【132】  【213】 【231】   【312】 【321】



public List<List<Integer>> permute(int[] nums) {
        int len = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        if (len==0)
            return res;
        Deque<Integer> path = new ArrayDeque<>();//路径存储
        boolean[] used = new boolean[len];//使用状态
        dfs(nums,len,0,path,used,res);
        return res;
    }

    private void dfs(int[] nums, int len, int depth, Deque<Integer> path, boolean[] used, List<List<Integer>> res) {
        if (depth==len){
            res.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < len; i++) {
            if (used[i]){
                continue;
            }
            //没被用过，添加到path，状态改为true，继续递归下一层，完成后回溯，弹出，使用状态改为false
            path.addLast(nums[i]);
            used[i] = true;
            dfs(nums,len,depth+1,path,used,res);
            path.removeLast();
            used[i] = false;
        }
    }
    
    //数组总和
    
    
   public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int len = candidates.length;
        List<List<Integer>> res = new ArrayList<>();
        if (len==0)
            return res;
        Arrays.sort(candidates);
        help(candidates,len,target,0,new ArrayDeque<Integer>(),res);
        return res;
    }

    private void help(int[] candidates, int len, int target, int start, ArrayDeque<Integer> path, List<List<Integer>> res) {
        if (target==0){
            res.add(new ArrayList<>(path));
            return;
        }
        for (int i = start; i < len; i++) {
            //剪枝
            if (target-candidates[i]<0){
                break;
            }
            path.addLast(candidates[i]);
            help(candidates,len,target-candidates[i],i,path,res);
            path.removeLast();
        }
    }
