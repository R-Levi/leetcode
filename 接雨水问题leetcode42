/**
     * 接雨水问题，官方的四种方法
     * @param height
     * @return
     */
    /*1.暴力法,对于每个元素，能接的雨水数为左右的最大值中的最小值减去当前值，累加即可
    * 时间复杂度O(n^2)
    * 空间复杂度O(1)
    * */
    public int trap1(int[] height) {
        int res = 0;
        int length = height.length;
        for (int i = 0; i < length; i++) {
            int max_left=0,max_right=0;
            for (int j = i; j >=0 ; j--) {
                max_left=Math.max(max_left,height[j]);
            }
            for (int j = i; j < length; j++) {
                max_right=Math.max(max_right,height[j]);
            }
            res += Math.min(max_left,max_right)-height[i];
        }
        return res;
    }
    /*2.动态编程，和暴力法差不多，省去了每次都得寻找的过程，而是以空间换时间
    * 先将max_left和max_right存储在一个数组中，
    * 然后和上边一样累加
    * */
    public int trap2(int[] height) {
        if (height.length==0)
            return 0;
        int res = 0;
        int[] max_left=new int[height.length];
        max_left[0]=height[0];
        int[] max_right=new int[height.length];
        max_right[height.length-1]=height[height.length-1];
        for (int i = 1; i < height.length; ++i) {
            max_left[i]=Math.max(height[i],max_left[i-1]);
        }
        for (int i = height.length-2; i >= 0; --i) {
            max_right[i]=Math.max(height[i],max_right[i+1]);
        }
        for (int i = 0; i < height.length; i++) {
            res+=Math.min(max_left[i],max_right[i])-height[i];
        }
        return res;
    }
    /*3.单调栈，遍历一次，栈中的元素存放的是索引。
    * 时间复杂度为O(n)
    * 空间复杂度O(n)*/
    public int trap3(int[] height) {
        if (height.length==0||height==null)
            return 0;
        Stack<Integer> stack = new Stack<>();
        int res = 0;
        for (int i = 0; i < height.length; i++) {
            //栈顶索引的元素与当前元素比较小于或等于的话pop出来，就是当前元素和栈的元素形成凹形，可以存水
            while (!stack.isEmpty()&&height[stack.peek()]<=height[i]){
                int index = stack.pop();
                if (!stack.isEmpty()){
                    // top此时指向的是此次接住的雨水的左边界的位置。右边界是当前的柱体，即i。
                    // Math.min(height[top], height[i]) 是左右柱子高度的min，减去height[index]就是雨水的高度。
                    // i - top- 1 是雨水的宽度。
                    int top = stack.peek();
                    res+=(Math.min(height[top],height[i])-height[index])*(i-top-1);
                }
            }
            stack.add(i);
        }
        return res;
    }
    /*4.双指针，还是找元素左右的最大值
    * 左边的最大值大于右边的，最小值肯定在左边，对于左边的话如果当前元素比max_left小存水，大的话更新max_left
    * 右边的最大值大于等于左边，最小值肯定在右边，当前元素比max_right小存水，大的话更新max_right
    * 时间复杂度O(n)
    * 空间复杂度O(1)*/
    public int trap4(int[] height) {
        int left = 0,right = height.length-1;
        int res = 0;
        int left_max = 0,right_max = 0;
        while (left<right){
            if (height[left]<height[right]){
                if (height[left] >= left_max) {
                    left_max = height[left];
                } else {
                    res += left_max - height[left];
                }
                left++;
            }else {
                if (height[right]>=right_max){
                    right_max=height[right];
                }else {
                    res += right_max - height[right];
                }
                right--;
            }
        }
        return res;
    }
