 //在取每位平方和的时候，发现，要么最终变为1，要么成环，要么变得很大，第三种情况无需考虑，比如三位数的最大数999的下一位数是243，则，会一直在3位数或
 //三位以下最终到一个循环，或者最终变为1，所以没有第三种情况，那么本体就变的非常简单了，找出有没有环即可。
 public boolean isHappy(int n) {
       Set<Integer> set = new HashSet<>();
       while(n!=1&&!set.contains(n)){
           set.add(n);
           n = nextNum(n);
       }
       return n==1;
    }
    public int nextNum(int n ){
        int res = 0;
        while(n>0){
            int d = n%10;
            n = n/10;
            res+=(d*d);
        }
        return res;
    }
    //快慢指针
    public boolean isHappy(int n) {
       int slow = n;
       int fast = nextNum(n);
       while(fast!=1&&slow!=fast){
           slow = nextNum(slow);
           fast = nextNum(nextNum(fast));
       }
       return fast==1;
    }
